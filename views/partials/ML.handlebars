<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        body {
            font-family: Arial, Helvetica, sans-serif;
        }

        /* The Modal (background) */
        .modal {
            display: none;
            /* Hidden by default */
            position: fixed;
            /* Stay in place */
            z-index: 1;
            /* Sit on top */
            padding-top: 100px;
            /* Location of the box */
            left: 0;
            top: 0;
            width: 100%;
            /* Full width */
            height: 100%;
            /* Full height */
            overflow: auto;
            /* Enable scroll if needed */
            background-color: rgb(0, 0, 0);
            /* Fallback color */
            background-color: rgba(0, 0, 0, 0.4);
            /* Black w/ opacity */
        }

        /* Modal Content */
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
        }

        /* The Close Button */
        .close {
            color: #aaaaaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

        .hidden {
            display: none;
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.20/lodash.min.js"
        integrity="sha512-90vH1Z83AJY9DmlWa8WkjkV79yfS2n2Oxhsi2dZbIv0nC4E6m5AbH8Nh156kkM7JePmqD6tcZsfad1ueoaovww=="
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.6/handlebars.min.js"
        integrity="sha512-zT3zHcFYbQwjHdKjCu6OMmETx8fJA9S7E6W7kBeFxultf75OPTYUJigEKX58qgyQMi1m1EgenfjMXlRZG8BXaw=="
        crossorigin="anonymous"></script>
</head>

<body>
    <div id="myModal" class="modal">

        <!-- Modal content -->
        <div class="modal-content">
            <span class="close">&times;</span>
            <h1>Feedback</h1>
            <p class="cropClass"></p>
            <p class="userName"></p>
            <p class="feedBack"></p>
        </div>
    </div>

    <div style="font-size: larger; color:black; text-align:center">
        <h1> Machine Image Model </h1>
    </div>
    <div id="webcam-container"></div>
    <button type="button" name="start" onclick="init()" class="send_btn">Start</button>
    <div>
        <input type="file" id="fileinput" class="hidden fileinput" accept="image/*">
        <canvas id="canvas"></canvas>
        <button type="button" class="checkUploadedFile hidden">Check</button>
    </div>


    <div id="label-container" style="color: black;"></div>
</body>
<script type="text/javascript">

    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/RHjfsPQwY/";

    let model, webcam, labelContainer, maxPredictions;


    const startBtn = document.querySelector('.start');
    const fileUpload = document.querySelector('.fileUpload');





    const fileInput = document.querySelector('#fileinput');
    const fileInputBtn = document.querySelector('.fileinput');
    const checkUploadedFile = document.querySelector('.checkUploadedFile');
    const canvas = document.querySelector('#canvas');

    const throttlePrediction = _.throttle(storePrediction, 2000);


    const toggleVisibility = (element) => {
        element.classList.toggle('hidden');
    }

    checkUploadedFile.addEventListener('click', async () => {
        const prediction = await model.predict(canvas);

        let highestProbability = 0;
        let cropStatus = "";

        prediction.forEach(predictions => {
            if (predictions.probability > highestProbability) {
                highestProbability = predictions.probability.toFixed(2);
                cropStatus = predictions.className;
            };
        });

        throttlePrediction(cropStatus, highestProbability);

    });

    async function storePrediction(className, probability) {
        const probState = 0.90;
        if (Number(probability) >= Number(probState.toFixed(2))) {
            let body = {
                cropProbality: Number(probability),
                cropClassName: className
            };


            // Get the modal
            var modal = document.getElementById("myModal");

            // Get the button that opens the modal
            var btn = document.getElementById("myBtn");

            // Get the <span> element that closes the modal
            var span = document.getElementsByClassName("close")[0];

            span.onclick = () => modal.style.display = "none";

          //  const feedBackModalTemplateSource = document.querySelector('.feedbackModalTemplate').innerHTML;
            //const feedBackTemplate = Handlebars.compile(feedBackModalTemplateSource);



            await axios.post('/ml/prediction', body)
                .then(async response => {
                    const data = response.data;
                    if (data.status) {
                        modal.style.display = "block";
                        document.querySelector('.cropClass').innerHTML = data.feedback.classname;
                        document.querySelector('.userName').innerHTML = data.feedback.user_name;
                        document.querySelector('.feedBack').innerHTML = data.feedback.feedback;
                        // buildModal(data.feedback.classname, data.feedback.user_name, data.feedback.feedback)
                    };
                });
        }
    };

    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();
        console.log(model)
        // Convenience function to setup a webcam
        // const flip = true; // whether to flip the webcam
        // webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
        // await webcam.setup(); // request access to the webcam
        // await webcam.play();
        //        window.requestAnimationFrame(loop);

        // append elements to the DOM
        //     document.getElementById("webcam-container").appendChild(webcam.canvas);
        //   labelContainer = document.getElementById("label-container");
        //  for (let i = 0; i < maxPredictions; i++) { // and class labels
        //    labelContainer.appendChild(document.createElement("div"));
        //  }


        // toggleVisibility(fileUpload);
        toggleVisibility(checkUploadedFile);
        toggleVisibility(fileInputBtn);
    }

    // run the webcam image through the image model
    fileInput.addEventListener('change', (event) => {
        if (event.target.files) {
            let file = event.target.files[0];
            var reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onloadend = function (e) {
                var image = new Image();
                image.src = e.target.result;
                image.onload = function (event) {

                    canvas.width = image.width;
                    canvas.height = image.height;
                    var ctx = canvas.getContext('2d');
                    ctx.drawImage(image, 0, 0);
                }
            }
        }
    });
</script>

</html>



<!-- The Modal -->